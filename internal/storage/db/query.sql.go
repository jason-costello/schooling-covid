// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package storage

import (
	"context"
	"time"
)

const getAllDistricts = `-- name: GetAllDistricts :many

SELECT  name, short_name, short_name, updated_at from districts order by name
`

type GetAllDistrictsRow struct {
	Name        string
	ShortName   string
	ShortName_2 string
	UpdatedAt   time.Time
}

// query.sql
func (q *Queries) GetAllDistricts(ctx context.Context) ([]GetAllDistrictsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllDistricts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllDistrictsRow
	for rows.Next() {
		var i GetAllDistrictsRow
		if err := rows.Scan(
			&i.Name,
			&i.ShortName,
			&i.ShortName_2,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSchools = `-- name: GetAllSchools :many
SELECT  name, short_name, district_short_name, created_at, updated_at from schools
`

type GetAllSchoolsRow struct {
	Name              string
	ShortName         string
	DistrictShortName string
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

func (q *Queries) GetAllSchools(ctx context.Context) ([]GetAllSchoolsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSchools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSchoolsRow
	for rows.Next() {
		var i GetAllSchoolsRow
		if err := rows.Scan(
			&i.Name,
			&i.ShortName,
			&i.DistrictShortName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllSchoolsForDistrict = `-- name: GetAllSchoolsForDistrict :many
SELECT  d.name, d.short_name, s.name
     , s.short_name, s.district_short_name
     , s.created_at, s.updated_at
    , c.positive, c.symptomatic, c.exposed, c.count_date

from districts as d
    join schools as s
on d.short_name = s.district_short_name
join counts as c
on s.short_name = c.school_short_name
where district_short_name = $1
Order by d.short_name, s.short_name, c.count_date
`

type GetAllSchoolsForDistrictRow struct {
	Name              string
	ShortName         string
	Name_2            string
	ShortName_2       string
	DistrictShortName string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	Positive          int32
	Symptomatic       int32
	Exposed           int32
	CountDate         string
}

func (q *Queries) GetAllSchoolsForDistrict(ctx context.Context, districtShortName string) ([]GetAllSchoolsForDistrictRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSchoolsForDistrict, districtShortName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSchoolsForDistrictRow
	for rows.Next() {
		var i GetAllSchoolsForDistrictRow
		if err := rows.Scan(
			&i.Name,
			&i.ShortName,
			&i.Name_2,
			&i.ShortName_2,
			&i.DistrictShortName,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Positive,
			&i.Symptomatic,
			&i.Exposed,
			&i.CountDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistrict = `-- name: GetDistrict :one
SELECT name, short_name, short_name, updated_at from districts where short_name = $1
`

type GetDistrictRow struct {
	Name        string
	ShortName   string
	ShortName_2 string
	UpdatedAt   time.Time
}

func (q *Queries) GetDistrict(ctx context.Context, shortName string) (GetDistrictRow, error) {
	row := q.db.QueryRowContext(ctx, getDistrict, shortName)
	var i GetDistrictRow
	err := row.Scan(
		&i.Name,
		&i.ShortName,
		&i.ShortName_2,
		&i.UpdatedAt,
	)
	return i, err
}

const getSchoolByID = `-- name: GetSchoolByID :one
SELECT  name, short_name, district_short_name, created_at, updated_at from schools where short_name = $1
`

type GetSchoolByIDRow struct {
	Name              string
	ShortName         string
	DistrictShortName string
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

func (q *Queries) GetSchoolByID(ctx context.Context, shortName string) (GetSchoolByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSchoolByID, shortName)
	var i GetSchoolByIDRow
	err := row.Scan(
		&i.Name,
		&i.ShortName,
		&i.DistrictShortName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
